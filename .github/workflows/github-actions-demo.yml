name: GitHub Actions Demo
run-name: ${{ (inputs.version == '' && 'Not bumping version') || format('Bumping version to {0}', inputs.version) }} and ${{ (inputs.dryRun == true && 'validating') || 'releasing' }} ${{ inputs.connectors }} ðŸš€
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to bump and tag. If unset, then skips version bump and tag.'
        required: false
        type: string
      dryRun:
        description: 'Dry run to only validate without release.'
        required: true
        default: true
        type: boolean
      connectors:
        description: 'Choose the Connector(s)'
        required: true
        type: choice
        default: 'All'
        options:
          - All
          - Smith
          - Mike
          - Scott
permissions: write-all
jobs:
  Bump-And-Release:
    runs-on: macos-latest
    outputs:
      previousVersion: ${{ steps.store_previous_version.outputs.previousVersion }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          token: ${{ github.token }}
      - name: Test
        run: |
          CMD="git config -l"
          if [ ${{ inputs.dryRun }} == false ]; then
            CMD="$CMD --name-only"
          else
            podspec="THEOplayer-Connector-Jack.podspec"
            branch=$(git rev-parse --abbrev-ref HEAD)
            pwd
            sed -i "s|:tag => \"[^\"]*\"|:branch => \"$branch\"|g" "$podspec"
            cat "$branch"
          fi
          echo "Running command: $CMD"
          $CMD
      - name: Print stuff
        run: |
          echo "Log macOS version"
          sw_vers
          echo "Log Xcode version"
          xcodebuild -version
          echo "${{ secrets.GITHUB_TOKEN }}"
          echo "${{ github.token }}"
          # git config --list
          # git config --global user.name "theramazz"
          # git config --global user.email "raffi.manissalian@theoplayer.com"
          # git config --list
          echo "${{ github.actor }}"
          echo "https://${{ github.actor}}:${{ github.token }}@github.com/${{ github.repository }}.git"
      # - id: store_previous_version
      #   run: |
      #     previousVersion=$(ruby -r "./version.rb" -e "print_version")
      #     echo "previousVersion=$previousVersion" >> "$GITHUB_OUTPUT"
      # - name: Update the version.json file
      #   if: inputs.version != ''
      #   run: sh update_version_json.sh -v ${{ inputs.version }}
      # - name: Commit and push the changes made to the version.json file
      #   if: inputs.version != ''
      #   run: |
      #     git add version.json
      #     git commit -m "update version.json"
      #     git push
      # - name: Update CHANGELOG.md file
      #   if: inputs.version != '' && inputs.dryRun == false
      #   run: sh update_changelog.sh -v ${{ inputs.version }}
      # - name: Commit and push the changes made to the CHANGELOG.md file
      #   if: inputs.version != '' && inputs.dryRun == false
      #   run: |
      #     git add CHANGELOG.md
      #     git commit -m "update CHANGELOG.md"
      #     git push
      # - name: Add and push new git tag
      #   if: inputs.version != ''
      #   run: |
      #     git tag ${{ inputs.version }}
      #     git push origin ${{ inputs.version }}
      # - name: ${{ (inputs.dryRun == true && 'Validate') || 'Release' }} on Cocoapods
      #   env:
      #     COCOAPODS_TRUNK_TOKEN: ${{ secrets.COCOAPODS_TRUNK_TOKEN }}
      #   run: |
      #     # make the command
      #     command="${{ (inputs.dryRun == true && 'spec lint') || 'trunk push' }}"
      #     # make the list of connectors
      #     prefix="THEOplayer-Connector"
      #     connectors=()
      #     if [ "${{ inputs.connectors }}" == "All" ]; then
      #       files=(*)
      #       for file in ${files[*]}
      #       do
      #         if [[ $file == *.podspec ]]; then
      #           connectors+=("$file")
      #         fi
      #       done
      #     else
      #       connectors+=("$prefix-${{ inputs.connectors }}.podspec")
      #     fi
      #     for connector in ${connectors[*]}
      #     do
      #       pod $command $connector --verbose --allow-warnings
      #     done
  # Cleanup:
  #   needs: Bump-And-Release
  #   if: (inputs.dryRun == true && inputs.version != '') && (success() || failure())
  #   runs-on: macos-latest
  #   steps:
  #     - name: Check out repository code
  #       uses: actions/checkout@v4
  #     - name: Update to latest
  #       run: |
  #         git fetch --all
  #         git pull
  #     - name: Remove and unpublish git tag
  #       run: git push --delete origin refs/tags/${{ inputs.version }}
  #     - name: Update(Revert) the version.json file back to the previous version
  #       env:
  #         PREVIOUS_VERSION: ${{ needs.Bump-And-Release.outputs.previousVersion }}
  #       run: |
  #         sh update_version_json.sh -v $PREVIOUS_VERSION
  #     - name: Commit and push the changes made to the version.json file
  #       run: |
  #         git add version.json
  #         git commit -m "update version.json"
  #         git push
